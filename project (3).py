# -*- coding: utf-8 -*-
"""project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gnVboUJ3S_y2Su8exKOT4OZvupwBQyD5
"""

!pip install PyPDF2

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import PyPDF2

# ------------------ MODEL LOADING ------------------
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# ------------------ CORE FUNCTIONS ------------------
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}
    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

def extract_text_from_pdf(pdf_file):
    if pdf_file is None:
        return ""
    try:
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text() + "\n"
        return text
    except Exception as e:
        return f"Error reading PDF: {str(e)}"

# ------------------ SMART SDLC TOOLS ------------------
def requirements_generator(user_text):
    prompt = f"Generate clear software requirements based on the following description:\n\n{user_text}\n\nRequirements:"
    return generate_response(prompt, max_length=1000)

def code_generator(request_text):
    prompt = f"Generate clean, working code for the following request. Include comments if needed:\n\n{request_text}\n\nCode:"
    return generate_response(prompt, max_length=1200)

def test_case_generator(code_text):
    prompt = f"Generate software test cases (unit tests) for the following code:\n\n{code_text}\n\nTest Cases:"
    return generate_response(prompt, max_length=1000)

def bug_fixer(code_text):
    prompt = f"Find and fix bugs in the following code. Provide the corrected code:\n\n{code_text}\n\nFixed Code:"
    return generate_response(prompt, max_length=1200)

def summarizer(doc_text):
    prompt = f"Summarize the following document and extract key points:\n\n{doc_text}"
    return generate_response(prompt, max_length=1000)

def ai_assistant(user_query):
    prompt = f"You are a helpful AI assistant for software development. Answer the following query:\n\n{user_query}"
    return generate_response(prompt, max_length=1000)

def submit_feedback(feedback_text):
    print(f"Feedback received: {feedback_text}")
    return "‚úÖ Thank you for your feedback!"

# ------------------ LOGIN HANDLER ------------------
# Dictionary of members (username: password)
user_credentials = {
    "admin1": "sdlc",
    "admin2": "sdlc",
    "admin3": "sdlc",
    "admin4": "sdlc"
}

def login(username, password):
    if username in user_credentials and user_credentials[username] == password:
        return (
            f"‚úÖ Welcome, {username}!",
            gr.update(visible=False),
            gr.update(visible=False),
            gr.update(visible=False),
            gr.update(visible=True)
        )
    else:
        return (
            "‚ùå Invalid username or password. Please try again.",
            gr.update(visible=True),
            gr.update(visible=True),
            gr.update(visible=True),
            gr.update(visible=False)
        )

# ------------------ UI ------------------
with gr.Blocks(css="""
    .green-output textarea {
        background-color: #e6ffe6 !important;  /* light green */
        color: #006400 !important;             /* dark green text */
        font-weight: bold;
    }
""") as app:
    gr.Markdown("# üí° Smart SDLC AI Platform")

    # ------------------ LOGIN ------------------
    with gr.Column() as login_section:
        gr.Markdown("## üîë Login")
        username_input = gr.Textbox(label="Username", visible=True)
        password_input = gr.Textbox(label="Password", type="password", visible=True)
        login_btn = gr.Button("Login", visible=True, variant="primary")
        login_message = gr.Textbox(label="", interactive=False, elem_classes="green-output")

    # ------------------ MAIN TABS ------------------
    with gr.Tabs(visible=False) as main_tabs:
        # Requirements Generator
        with gr.TabItem("üìå Requirements Generator"):
            req_input = gr.Textbox(label="Describe your project idea", lines=5)
            req_btn = gr.Button("Generate Requirements", variant="primary")
            req_output = gr.Textbox(label="Generated Requirements", lines=15, elem_classes="green-output")
            req_btn.click(requirements_generator, inputs=req_input, outputs=req_output)

        # Code Generator
        with gr.TabItem("üíª Code Generator"):
            code_input = gr.Textbox(label="Describe your coding task", lines=5, placeholder="e.g., Python code to sort numbers...")
            code_btn = gr.Button("Generate Code", variant="primary")
            code_output = gr.Textbox(label="Generated Code", lines=20, elem_classes="green-output")
            code_btn.click(code_generator, inputs=code_input, outputs=code_output)

        # Test Case Generator
        with gr.TabItem("üß™ Test Case Generator"):
            test_input = gr.Textbox(label="Paste your code", lines=10)
            test_btn = gr.Button("Generate Test Cases", variant="primary")
            test_output = gr.Textbox(label="Generated Test Cases", lines=15, elem_classes="green-output")
            test_btn.click(test_case_generator, inputs=test_input, outputs=test_output)

        # Bug Fixer
        with gr.TabItem("üêû Bug Fixer"):
            bug_input = gr.Textbox(label="Paste buggy code", lines=10)
            bug_btn = gr.Button("Fix Bugs", variant="primary")
            bug_output = gr.Textbox(label="Fixed Code", lines=15, elem_classes="green-output")
            bug_btn.click(bug_fixer, inputs=bug_input, outputs=bug_output)

        # Document Summarizer
        with gr.TabItem("üìë Summarizer"):
            doc_input = gr.Textbox(label="Paste document text", lines=10)
            doc_btn = gr.Button("Summarize", variant="primary")
            doc_output = gr.Textbox(label="Summary", lines=15, elem_classes="green-output")
            doc_btn.click(summarizer, inputs=doc_input, outputs=doc_output)

        # AI Assistant
        with gr.TabItem("ü§ñ AI Assistant"):
            ai_input = gr.Textbox(label="Ask me anything", lines=3, placeholder="e.g., Explain Agile methodology...")
            ai_btn = gr.Button("Ask", variant="primary")
            ai_output = gr.Textbox(label="AI Response", lines=15, elem_classes="green-output")
            ai_btn.click(ai_assistant, inputs=ai_input, outputs=ai_output)

        # Feedback
        with gr.TabItem("üìù Feedback"):
            feedback_input = gr.Textbox(label="Your Feedback", lines=5, placeholder="Enter your feedback here...")
            submit_feedback_btn = gr.Button("Submit Feedback", variant="primary")
            feedback_response = gr.Textbox(label="Response", interactive=False, elem_classes="green-output")
            submit_feedback_btn.click(submit_feedback, inputs=feedback_input, outputs=feedback_response)

    # ------------------ LOGIN HANDLER ------------------
    login_btn.click(
        login,
        inputs=[username_input, password_input],
        outputs=[login_message, username_input, password_input, login_btn, main_tabs]
    )

# ------------------ LAUNCH ------------------
app.launch(share=True)